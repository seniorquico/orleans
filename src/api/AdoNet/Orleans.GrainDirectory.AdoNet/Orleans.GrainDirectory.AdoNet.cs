//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Configuration
{
    public partial class AdoNetGrainDirectoryOptionsValidator : IConfigurationValidator
    {
        public AdoNetGrainDirectoryOptionsValidator(GrainDirectory.AdoNet.AdoNetGrainDirectoryOptions options, string name) { }

        public void ValidateConfiguration() { }
    }
}

namespace Orleans.GrainDirectory.AdoNet
{
    public partial class AdoNetGrainDirectoryOptions
    {
        [Redact]
        [System.ComponentModel.DataAnnotations.Required]
        public string ConnectionString { get { throw null; } set { } }

        [System.ComponentModel.DataAnnotations.Required]
        public string Invariant { get { throw null; } set { } }
    }
}

namespace Orleans.GrainDirectory.AdoNet.Storage
{
    public partial class OrleansRelationalDownloadStream : System.IO.Stream
    {
        public OrleansRelationalDownloadStream(System.Data.Common.DbDataReader reader, int ordinal) { }

        public override bool CanRead { get { throw null; } }

        public override bool CanSeek { get { throw null; } }

        public override bool CanTimeout { get { throw null; } }

        public override bool CanWrite { get { throw null; } }

        public override long Length { get { throw null; } }

        public override long Position { get { throw null; } set { } }

        public override System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken) { throw null; }

        protected override void Dispose(bool disposing) { }

        public override void Flush() { }

        public override int Read(byte[] buffer, int offset, int count) { throw null; }

        public override System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { throw null; }

        public override long Seek(long offset, System.IO.SeekOrigin origin) { throw null; }

        public override void SetLength(long value) { }

        public override void Write(byte[] buffer, int offset, int count) { }
    }
}

namespace Orleans.Hosting
{
    public static partial class AdoNetGrainDirectoryServiceCollectionExtensions
    {
    }

    public static partial class AdoNetGrainDirectorySiloBuilderExtensions
    {
        public static ISiloBuilder AddAdoNetGrainDirectory(this ISiloBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<GrainDirectory.AdoNet.AdoNetGrainDirectoryOptions>> configureOptions) { throw null; }

        public static ISiloBuilder AddAdoNetGrainDirectory(this ISiloBuilder builder, string name, System.Action<GrainDirectory.AdoNet.AdoNetGrainDirectoryOptions> configureOptions) { throw null; }

        public static ISiloBuilder UseAdoNetGrainDirectoryAsDefault(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<GrainDirectory.AdoNet.AdoNetGrainDirectoryOptions>> configureOptions) { throw null; }

        public static ISiloBuilder UseAdoNetGrainDirectoryAsDefault(this ISiloBuilder builder, System.Action<GrainDirectory.AdoNet.AdoNetGrainDirectoryOptions> configureOptions) { throw null; }
    }
}